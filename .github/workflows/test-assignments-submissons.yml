name: Test Assignments Submissions

on:
  push:
    branches:
      - 2025.1
    paths:
      - 'assignments/**/submissions/**'
  pull_request:
    branches:
      - 2025.1
    paths:
      - 'assignments/**/submissions/**'
  workflow_dispatch:

jobs:
  test-assignments-submissions:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      id: checkout-repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Detect modified tasks and students
      id: detect-tasks-students
      run: |
        echo "üîç Verificando os arquivos alterados..."
    
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "üì• Recuperando altera√ß√µes do Pull Request"
          BASE_REF="origin/${{ github.event.pull_request.base.ref }}"
          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=1
        else
          BASE_REF="${{ github.event.before }}"
        fi
    
        echo "üîé Diret√≥rio base: $BASE_REF"
    
        # Identifica arquivos modificados
        MODIFIED_FILES=$(git diff --name-only $BASE_REF ${{ github.sha }})
    
        # Obt√©m todas as tarefas alteradas
        MODIFIED_TASKS=($(echo "$MODIFIED_FILES" | grep -oE 'assignments/[^/]+' | cut -d '/' -f2 | sort -u))
        MODIFIED_STUDENTS=($(echo "$MODIFIED_FILES" | grep -oE 'submissions/[^/]+' | cut -d '/' -f2 | sort -u))
    
        if [ ${#MODIFIED_TASKS[@]} -eq 0 ] || [ ${#MODIFIED_STUDENTS[@]} -eq 0 ]; then
          echo "‚ùå Erro: Nenhuma altera√ß√£o detectada no diret√≥rio correto (assignments/**/submissions/**)"
          exit 1
        fi
    
        echo "üìÇ Tarefas detectadas: ${MODIFIED_TASKS[*]}"
        echo "üßë‚Äçüéì Alunos detectados: ${MODIFIED_STUDENTS[*]}"
    
        # Corrigindo erro ao salvar valores no ambiente do GitHub Actions
        echo "tasks=$(IFS=,; echo "${MODIFIED_TASKS[*]}")" >> $GITHUB_ENV
        echo "students=$(IFS=,; echo "${MODIFIED_STUDENTS[*]}")" >> $GITHUB_ENV

    - name: Set up JDK 21
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '21'

    - name: Download JUnit dependency
      id: download-junit
      run: |
        echo "‚¨áÔ∏è Baixando JUnit..."
        mkdir -p test-libs
        curl -L -o test-libs/junit-platform-console-standalone-1.11.4.jar \
          https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.11.4/junit-platform-console-standalone-1.11.4.jar

    - name: Execute tests for modified submissions
      run: |
        echo "üöÄ Iniciando testes para as tarefas alteradas..."
        TEST_FAILURES=0

        for task in ${{ env.tasks }}; do
          for student in ${{ env.students }}; do
            echo "üîç Testando: Tarefa '$task' | Aluno '$student'"

            # Diret√≥rios relevantes
            TASK_DIR="assignments/$task"
            STUDENT_DIR="$TASK_DIR/submissions/$student"
            CODE_DIR="$STUDENT_DIR/src"
            BIN_DIR="$STUDENT_DIR/bin"
            LIB_DIR="$STUDENT_DIR/lib"

            # Valida se o diret√≥rio do aluno existe
            if [ ! -d "$STUDENT_DIR" ]; then
              echo "‚ö†Ô∏è  O diret√≥rio do aluno '$student' n√£o existe para a tarefa '$task'. Pulando..."
              continue
            fi

            # Verifica se h√° c√≥digo-fonte para compilar
            if [ ! -d "$CODE_DIR" ]; then
              echo "‚ö†Ô∏è  Nenhum c√≥digo encontrado em '$CODE_DIR'. Pulando..."
              continue
            fi

            # Configura diret√≥rios
            mkdir -p "$BIN_DIR" "$LIB_DIR"

            # Copia a depend√™ncia para o diret√≥rio do estudante
            cp test-libs/junit-platform-console-standalone-1.11.4.jar "$LIB_DIR/"

            # Compila os arquivos Java
            echo "‚öôÔ∏è Compilando c√≥digo..."
            if ! javac -cp "$LIB_DIR/*" -d "$BIN_DIR" "$CODE_DIR"/*.java "$TASK_DIR/test"/*.java; then
              echo "‚ùå Erro na compila√ß√£o do aluno '$student' na tarefa '$task'"
              TEST_FAILURES=$((TEST_FAILURES + 1))
              continue
            fi

            # Executa os testes
            echo "üß™ Executando testes..."
            if ! java -jar "$LIB_DIR/junit-platform-console-standalone-1.11.4.jar" --class-path "$BIN_DIR" --scan-class-path; then
              echo "‚ùå Falha nos testes para aluno '$student' na tarefa '$task'"
              TEST_FAILURES=$((TEST_FAILURES + 1))
              continue
            fi

            echo "‚úÖ Testes bem-sucedidos para '$student' na tarefa '$task'!"
          done
        done

        if [ $TEST_FAILURES -gt 0 ]; then
          echo "‚ùå $TEST_FAILURES falha(s) nos testes. Verifique os logs!"
          exit 1
        fi

    - name: Cleanup temporary files
      run: rm -rf test-libs
